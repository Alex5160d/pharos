schedules:
- cron: "0 12 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - master
  always: true

variables:
  CCACHE_DIR: $(Pipeline.Workspace)/cache
  CHOCLATEY_CACHE_DIR: $(Pipeline.Workspace)/choclatey_cache
  PREFIX: /usr/local/pharos-build
  CXXFLAGS: -std=c++11 -D_GLIBCXX_USE_CXX11_ABI=1

jobs:
- job: Build_Prereqs
  condition: and(succeeded(), variables.buildNormal)
  timeoutInMinutes: 660
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get -y update
      sudo apt-get install ccache -y
      echo "##vso[task.prependpath]/usr/lib/ccache"
    displayName: Install ccache and update PATH to use linked versions of gcc, cc, etc
  - script: sudo apt-get -y install sudo build-essential wget flex ghostscript bzip2 git subversion automake libtool bison python libncurses-dev vim-common sqlite3 libsqlite3-0 libsqlite3-dev zlib1g-dev cmake libyaml-cpp-dev libxml2-dev ninja-build
    displayName: Install prereqs
  - task: Cache@2
    inputs:
      key: 'ccache | "$(Agent.OS)" | "$(PREFIX)" | "$(System.JobDisplayName)" | "$(CXXFLAGS)"'
      path: $(CCACHE_DIR)
    displayName: ccache
  - bash: |
      set -e
      sudo mkdir $PREFIX
      NCPU=2 COMPILE_BOOST=yes ./scripts/build_prereqs.bash -reclaim
      # We have to make our own tar file here because Azure doesn't support symbolic links yet
      sudo tar -cf local.tar -C $PREFIX .
    displayName: Build prereqs
    env:
      PREFIX: $(PREFIX)
      CXXFLAGS: $(CXXFLAGS)
  - publish: local.tar
    artifact: Prereqs

- job: Build_Pharos
  dependsOn: Build_Prereqs
  timeoutInMinutes: 660
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get -y update
      sudo apt-get install ccache -y
      echo "##vso[task.prependpath]/usr/lib/ccache"
    displayName: Install ccache and update PATH to use linked versions of gcc, cc, etc
  - script: sudo apt-get -y install sudo build-essential wget flex ghostscript bzip2 git subversion automake libtool bison python libncurses-dev vim-common sqlite3 libsqlite3-0 libsqlite3-dev zlib1g-dev cmake libyaml-cpp-dev libxml2-dev ninja-build
    displayName: Install prereqs

  - task: Cache@2
    inputs:
      key: 'ccache | "$(Agent.OS)" | "$(System.Job.DisplayName)" | "$(CXXFLAGS)"'
      path: $(CCACHE_DIR)
    displayName: ccache
  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: Prereqs
  - bash: |
      set -e
      echo $PREFIX
      sudo mkdir $PREFIX
      sudo tar -xf ../local.tar -C $PREFIX
      NCPU=2 ./scripts/build.bash -reclaim
    env:
      PREFIX: $(PREFIX)
      CXXFLAGS: $(CXXFLAGS)
    displayName: Build pharos

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2008"
    chocoPackages:
    - "visualcplusplusexpress2008"
    displayName: "Visual C++ Express 2008"
    cmakeGenName: "Visual Studio 9 2008"

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2010"
    chocoPackages:
    - "vcexpress2010"
    displayName: "Visual C++ Express 2010"
    cmakeGenName: "Visual Studio 10 2010"

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2012"
    chocoPackages:
    - "visualstudio2012wdx"
    displayName: "Visual C++ 2012"
    cmakeGenName: "Visual Studio 11 2012"

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2013"
    chocoPackages:
    - "visualstudioexpress2013windowsdesktop"
    displayName: "Visual C++ 2013"
    cmakeGenName: "Visual Studio 12 2013"

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2015"
    chocoPackages:
    - "visualcppbuildtools"
    displayName: "Visual C++ 2015"
    cmakeGenName: "Visual Studio 14 2015"

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2017"
    chocoPackages: []
    displayName: "Visual C++ 2017"
    cmakeGenName: "Visual Studio 15 2017"
    vmImage: "vs2017-win2016"

- template: azure-pipelines/Build_Exes.yaml
  parameters:
    name: "vs2019"
    # A hack because VS2019 is already installed on these machines
    chocoPackages: []
    displayName: "Visual C++ 2019"
    cmakeGenName: "Visual Studio 16 2019"
