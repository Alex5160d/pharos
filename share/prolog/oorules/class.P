% ============================================================================================
% Rules for tracking which methods are assigned to which classes.
% ============================================================================================

:- if(current_prolog_flag(version_data, xsb(_,_,_,_))).
:- use_module(lists, [member/2]).
:- use_module(swi, [maplist/2]).
:- endif.

make(M) :-
    try_assert(findint(M, M)).

unionhelp(Rold, Rnew, M) :-
    try_retract(findint(M, Rold)),
    try_assert(findint(M, Rnew)).

union(M1, M2) :-

    % Rnew is the new representative for everybody!
    find(M1, Rnew),
    % Rold is the old representative
    find(M2, Rold),

    % Let's move all the members in S2 to S1.
    findall(M2, S2),

    maplist(unionhelp(Rold, Rnew),
            S2).

makeIfNecessary(M) :-
    findint(M, _S) -> true;
    (make(M),
     logerror('Error: Unknown method '), logerrorln(M)).

find(M, R) :-
    findint(M, R).

% Find all objects on M's class
findall(M, S) :-
    find(M, R),
    setof(X, find(X, R), S).

% Filter out non-methods...
findallMethods(C, O) :- findall(C, L), include(factMethod, L, O).

numberOfMethods(C, O) :- findallMethods(C, L),
                         length(L, O).

findAllClasses(S) :-
    setof(C, M^find(M, C), S).

class(C) :-
    findAllClasses(S),
    member(C, S).
